================================================================================

                      Capture SDK Version 1.0.0


                            Socket Mobile, Inc.
                           www.socketmobile.com

               © Copyright 2017 all rights reserved worldwide
================================================================================


Content
1) Quick install notes
2) Sample code
3) Introduction
4) Content description
5) Capture usage
6) Device Notifications (Battery Level)
7) SoftScan

Appendix A. Changes log

1. Quick install notes
----------------------

This release of the Capture SDK is now hosted on the Cocoapods repository.

First, you need to install CocoaPods on your machine by following the
instructions found here: https://guides.cocoapods.org/using/getting-started.html

An application key is required in order to use Capture SDK.

The application key can be generated by log in Socket Mobile developer portal
and by registering your application.

This registration needs the Socket Mobile developer ID, the application Bundle
ID (which is case sensitive).

Then you need to create a file named Podfile' in the same folder as your Xcode
project is located.
The content of this file should be something like:
        xcodeproj 'myProject.xcodeproj'
         pod 'SKTCaptureObjC'

Once you have saved this file, from the terminal command prompt, type the
command 'pod install' and make sure your current directory is where the Podfile
is.

This creates a workspace file. If you have Xcode open on your project, you need
to close it, and open your project workspace file.

From there you should be able to compile without error.

Now you're ready to add #import 'CaptureHelper.h' in your main controller, and
make it derive from <CaptureHelperDelegate>.
Go to the CaptureHelperDelegate source and copy paste the delegates you want to
override, at minimum the onDecodedData delegate in order to be able to
receive the barcode decoded data in your application.

2. Sample code
--------------
Sample code can be found on GitHub / SocketMobile.

3. Introduction
---------------

This SDK is designed for using all of the Socket scanners on the iOS platforms.
The intended usage is to develop a native iOS application that includes built in
support for the Socket scanners.
As the application developer this SDK will give you full programmatic access to
a connected CHS scanner to customize the scanner Symbology, data support and
manage scanner feedback messages and functions.
The API document for the SDK can be found here:
http://docs.socketmobile.com/capture-preview/ios/en/latest/

Note: The CRS Series 9 Ring Scanner is NOT supported.

The Socket Mobile scanners are shipped by default in Basic mode which is not
compatible with the Capture SDK.

The scanner can be configured to the Application mode by using the Socket Mobile
Companion application.

***Please note that if you discover and test with the scanner in HID mode that
it may cause conflicts with discovering and using the scanner in MFi Application
mode due to the fact that the iOS device will cache the name and service
information of the device.
If you setup the scanner in HID mode Socket recommends that you remove the
pairing information stored in the iOS device by removing the HID discovered
device in the Bluetooth settings by selecting “forget this device” AND
completely closing out the settings applet by returning to your home screen and
shut down the settings applet using the iOS multi-task panel.***

The scanner LED will blink 1 time a second to indicate it is discoverable and
ready to be paired. After 2 mins the scanner will emit a long beep tone to
indicate that it is no longer discoverable. You can re-enable the scanner to be
discoverable by simply pressing the Scan or Power button on the scanner for the
7Xi/Qi. For the 1D scanners (7Ci/Mi/Pi,8Ci, 8Qi) you will need to power cycle
the scanner to initiate the 2 minute discovery period.

Once you have setup the scanner you can discover and pair to the CHS scanner
using the Bluetooth manager in the iOS device by tapping on the
Settings--General--Bluetooth.

Verify that Bluetooth is on. Wait for the device to discover the scanner and
verify the correct friendly name. Once the scanner appears tap on the device to
complete the pairing process. Once the pairing is complete the iOS device will
automatically initiate a connection and the scanner will remain permanently
paired and connected to the iOS device as an available Bluetooth iAP accessory
to communicate with in your app.  The scanner Led will blink 1 time every 3
seconds to indicate a connection to the iOS device.

If you need to clear the pairing information in order to connect with another
iOS device you will need to manually clear the pairing from BOTH the scanner and
the connected iOS device.

From the scanner verify the scanner is powered on and connected and hold down
the large trigger button while powering off the scanner. You will hear a 3 tone
sequence to let you know the pairing information has been cleared.

From the iOS device select the Socket device and tap on “Forget this device” to
remove the pairing. You are now free to use the scanner with another device or
setup the same connection to the existing device.


SUMMARY

For ALL user scenarios with the scanners and any sample app or developed
application with Capture support these steps MUST occur in order to be able to
connect and communicate with the scanner:

1. Setup the scanner in iOS mode
2. Discover the scanner in the Bluetooth manager of the iOS device
3. Pair with the scanner in the Bluetooth manager of the iOS device
4. Verify Bluetooth connected state between the iOS device and scanner

4. Content description
----------------------

The content at the root of the SDK contains the source file for CaptureHelper,
a wav file for SoftScan feature, a public key file for verifying the application
key, the podspec file descriptor, the license file, and this Readme file.

There are 2 sub-folders: include and lib. Include folder contains all the header
files of Capture, and the lib folder contains the libCaptureCore.a and
libCaptureServiceDirect.a files.

5. Capture usage
----------------

The Capture is described in greater detail in the
http://docs.socketmobile.com/capture-preview/ios/en/latest/ document.
A brief description follows.

The recommended way of using Capture is by using CaptureHelper.

CaptureHelper can be instantiated in one of your application controllers using
its [SKTCaptureHelper sharedInstance] static member.

The chosen controller must implement the CaptureHelperDelegate protocol in order
to receive the various Capture asynchronous events.

The reference of the controller deriving from the CaptureHelperDelegate can be
set by using the CaptureHelper pushDelegate method.

CaptureHelper maintains a delegates stack. The delegate on top of the stack is
the one that receives the notification from Capture. So if the application has
multiple views requiring the scanning feature, it can push a reference of the
new view controller to the CaptureHelper delegates stack, and remove that
reference and the view is no longer active.

In order to start Capture, the first API to invoke is the
openWithAppInfo:completionHandler method with the application key retrieved from
the Socket Mobile developer portal, the developer ID that could be also
retrieved from the developer portal and the application bundle ID prefixed by
the platform on which the application is designed to run.
Here is an example of such application ID: "ios:com.socketmobile.SingleEntry".
The application ID is case sensitive.

Once Capture is open, then the device arrival can occurs as soon as a scanner is
connected to the iOS device.

The decoded data coming from the scanner can be retrieved by overriding the
onDecodedData delegate.

Summary for Integrating Capture in Xcode application is now a simple 6 steps
process:

1. Add 'pod "SKTCaptureObjC" in the file Podfile located at the same level than
the application .xcproj file.
Make sure this file first line is giving the name of the application .xcproj
file: 'xcodeproj "myProject.xcproj" '

2. Install Capture CocoaPods in the project by using the terminal and typing the
following command: 'pod install' in the project's directory. Once the
installation completes, use the application workspace in order to compile it
with Capture.

3. Import "SktCaptureHelper.h" in your application main controller

4. Derive your application main controller from the SKTCaptureHelperDelegate
protocol

5. In the appropriate controller function initializes CaptureHelper, by using
the pushDelegate to specify your controller reference and by calling
SKTCaptureHelper openWithAppInfo:completionHandler method to start using
Capture.

6. Add the implementation of the SKTCaptureHelperDelegate protocol from which
the controller derived to handle the various Capture asynchronous events.


CaptureHelper makes the application aware of a new scanner connection by
invoking the onDeviceArrival of the protocol and, in the same way when a scanner
disconnects, the onDeviceRemoval is invoked. A CaptureHelper device instance
representing the device that is connected can be used to retrieve or set a
device property.

If the scanner triggers a scan, the decoded data can be retrieve in the protocol
function onDecodedData.

The application can retrieve or modify the scanner properties by calling the
various CaptureHelper get/set methods.
By example there is a method to retrieve the scanner friendly name:
getFriendlyNameWithCompletionHandler. The call is asynchronous and will return
immediately. The final result and the friendly name can be retrieved in the
completion handler function block.

If a property in not accessible through the available CaptureHelper methods, it
is very easy to add new ones, by creating a CaptureHelper extension class and
copy and paste a similar get/set method and change the property settings inside
the new method.

Creating a CaptureHelper extension allows to avoid an overwrite of a modified
version of CaptureHelper when updating to a more recent Capture CocoaPods.

6. Device Notifications (Battery Level)
---------------------------------------
The Device Notifications can be configured in order to receive a notification
each time one or more of those events occur:
- Battery Level change,
- Power State change,
- Buttons State change.

By default the device notifications of a scanner is turned off.
The recommended usage is to first check if a particular notification is
turned off or on. Depending on this reading, then the application can set a
specific notification to be received if it is not already set. That setting
stays persistent in the scanner across scanner shutdown. It is not recommended
to set systematically a notification in the device without checking first if
that setting is already correct.

For the Battery Level and Power State, it could take a long time before the
state changes, so usually the initial value is read using the corresponding
CaptureHelper Get method.

Last, some scanners don't support some of the notification. If that's the case,
a ESKT_NOTSUPPORTED (-15) is returned when trying to set a notification that is
not supported.

7. SoftScan
-----------
SoftScan feature is the capability of using the phone's camera in order to scan
a barcode.
The main purpose of integrating this feature in Capture is to provide a
consistent interface to barcode readers. Whatever it is a Socket Mobile Scanner,
or simply the phone's camera, the application relies on the same interface.

The application using the SoftScan feature needs to do 2 things differently than
that Socket Mobile Scanners don't require.

The first thing is to register the application main UI view to Capture so the
camera overlay view can be displayed correctly by passing the UI application
reference to the overlay property (kSktCapturePropIdOverlayViewDevice).

The second thing is to provide a trigger logic that starts the SoftScan scanning
operation. The trigger is a Capture property (kSktCapturePropIdTriggerDevice)
that exists since the first version of Capture, whereas the overlay view
property has been added to support SoftScan feature.

A third property (kSktCapturePropIdSoftScanStatus) allows to enable or disable
the SoftScan feature. This is a Capture property that is persistent across the
life cycle of the application using it.

If the SoftScan feature is enabled, Capture will send a device arrival
notification to the application referencing a SoftScan device the application
can control.
Once the application trigger a scan, the decoded data arrives the same way with
the same information than as any other scanners supported by Capture.

Appendix A. Changes log
-----------------------
